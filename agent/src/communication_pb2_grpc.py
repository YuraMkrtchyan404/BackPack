# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import communication_pb2 as communication__pb2


class RsyncNotificationsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TakeSnapshotAfterRsyncCompletion = channel.unary_unary(
                '/RsyncNotifications/TakeSnapshotAfterRsyncCompletion',
                request_serializer=communication__pb2.RsyncCompletionRequest.SerializeToString,
                response_deserializer=communication__pb2.SnapshotCompletionResponse.FromString,
                )
        self.PrepareDatasetBeforeRsyncStart = channel.unary_unary(
                '/RsyncNotifications/PrepareDatasetBeforeRsyncStart',
                request_serializer=communication__pb2.RsyncStartRequest.SerializeToString,
                response_deserializer=communication__pb2.PreparationCompletionResponse.FromString,
                )
        self.ListSnapshots = channel.unary_unary(
                '/RsyncNotifications/ListSnapshots',
                request_serializer=communication__pb2.ListSnapshotsRequest.SerializeToString,
                response_deserializer=communication__pb2.ListSnapshotsResponse.FromString,
                )
        self.RecoverSnapshot = channel.unary_unary(
                '/RsyncNotifications/RecoverSnapshot',
                request_serializer=communication__pb2.RecoverSnapshotRequest.SerializeToString,
                response_deserializer=communication__pb2.RecoverSnapshotResponse.FromString,
                )


class RsyncNotificationsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TakeSnapshotAfterRsyncCompletion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrepareDatasetBeforeRsyncStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSnapshots(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecoverSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RsyncNotificationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TakeSnapshotAfterRsyncCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.TakeSnapshotAfterRsyncCompletion,
                    request_deserializer=communication__pb2.RsyncCompletionRequest.FromString,
                    response_serializer=communication__pb2.SnapshotCompletionResponse.SerializeToString,
            ),
            'PrepareDatasetBeforeRsyncStart': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareDatasetBeforeRsyncStart,
                    request_deserializer=communication__pb2.RsyncStartRequest.FromString,
                    response_serializer=communication__pb2.PreparationCompletionResponse.SerializeToString,
            ),
            'ListSnapshots': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSnapshots,
                    request_deserializer=communication__pb2.ListSnapshotsRequest.FromString,
                    response_serializer=communication__pb2.ListSnapshotsResponse.SerializeToString,
            ),
            'RecoverSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.RecoverSnapshot,
                    request_deserializer=communication__pb2.RecoverSnapshotRequest.FromString,
                    response_serializer=communication__pb2.RecoverSnapshotResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RsyncNotifications', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RsyncNotifications(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TakeSnapshotAfterRsyncCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RsyncNotifications/TakeSnapshotAfterRsyncCompletion',
            communication__pb2.RsyncCompletionRequest.SerializeToString,
            communication__pb2.SnapshotCompletionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrepareDatasetBeforeRsyncStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RsyncNotifications/PrepareDatasetBeforeRsyncStart',
            communication__pb2.RsyncStartRequest.SerializeToString,
            communication__pb2.PreparationCompletionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSnapshots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RsyncNotifications/ListSnapshots',
            communication__pb2.ListSnapshotsRequest.SerializeToString,
            communication__pb2.ListSnapshotsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecoverSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RsyncNotifications/RecoverSnapshot',
            communication__pb2.RecoverSnapshotRequest.SerializeToString,
            communication__pb2.RecoverSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
